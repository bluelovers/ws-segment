"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const express = require("express");
const core_1 = require("novel-segment/lib/segment/core");
const useModules2_1 = require("novel-segment/lib/segment/methods/useModules2");
const mod_1 = require("novel-segment/lib/mod");
const app = express();
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
let CACHED_SEGMENT;
app.get('*', fn);
app.post('*', fn);
exports.default = app;
function fn(req, res, next) {
    let rq = Object.assign({}, req.query, req.body);
    res.set({
        'Access-Control-Allow-Origin': '*',
        'Content-Type': 'application/json',
    });
    const timestamp = Date.now();
    let error;
    if (rq.input && rq.input.length) {
        if (typeof rq.input === 'string') {
            rq.input = [rq.input];
        }
        if (Array.isArray(rq.input)) {
            rq.options = rq.options || {};
            try {
                const CACHED_SEGMENT = getSegment();
                rq.input.map(line => {
                    if (typeof line !== 'string') {
                        line = Buffer.from(line).toString();
                    }
                    return CACHED_SEGMENT.doSegment(line);
                });
                if (!rq.nocache) {
                    res.set({
                        'Cache-Control': 'public, max-age=3600000',
                    });
                }
                res.status(200).json({
                    code: 1,
                    count: rq.input.length,
                    timestamp,
                    time: Date.now() - timestamp,
                    results: rq.input,
                });
                return;
            }
            catch (e) {
                error = e;
                res.status(500).json({
                    code: 0,
                    error: true,
                    timestamp,
                    message: error.message,
                    request: rq,
                });
                return;
            }
        }
    }
    if (!rq.nocache) {
        res.set({
            'Cache-Control': 'public, max-age=10000',
        });
    }
    res.status(400).json({
        code: 0,
        error: true,
        timestamp,
        message: '參數錯誤',
        request: rq,
    });
}
function createSegment() {
    return new core_1.default({
        autoCjk: true,
        optionsDoSegment: {
            convertSynonym: true,
        },
        all_mod: true,
    });
}
function getSegment() {
    const DICT = require('./cache.json');
    CACHED_SEGMENT = createSegment();
    useModules2_1.useModules(CACHED_SEGMENT, mod_1.default(CACHED_SEGMENT.options.all_mod));
    CACHED_SEGMENT.DICT = DICT;
    CACHED_SEGMENT.inited = true;
    return CACHED_SEGMENT;
}
exports.getSegment = getSegment;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG1DQUFvQztBQUVwQyx5REFBNEU7QUFDNUUsK0VBQTJFO0FBQzNFLCtDQUFzRDtBQUV0RCxNQUFNLEdBQUcsR0FBRyxPQUFPLEVBQUUsQ0FBQztBQUV0QixHQUFHLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBQ3hCLEdBQUcsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFFaEQsSUFBSSxjQUF1QixDQUFDO0FBRTVCLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2pCLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBRWxCLGtCQUFlLEdBQUcsQ0FBQTtBQUVsQixTQUFTLEVBQUUsQ0FBRSxHQUFZLEVBQUUsR0FBYSxFQUFFLElBQWtCO0lBRTNELElBQUksRUFBRSxHQUlGLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRTNDLEdBQUcsQ0FBQyxHQUFHLENBQUM7UUFDUCw2QkFBNkIsRUFBRSxHQUFHO1FBQ2xDLGNBQWMsRUFBRSxrQkFBa0I7S0FDbEMsQ0FBQyxDQUFDO0lBRUgsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBRTdCLElBQUksS0FBWSxDQUFDO0lBRWpCLElBQUksRUFBRSxDQUFDLEtBQUssSUFBSSxFQUFFLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFDL0I7UUFDQyxJQUFJLE9BQU8sRUFBRSxDQUFDLEtBQUssS0FBSyxRQUFRLEVBQ2hDO1lBQ0MsRUFBRSxDQUFDLEtBQUssR0FBRyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUN0QjtRQUVELElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQzNCO1lBQ0MsRUFBRSxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUMsT0FBTyxJQUFJLEVBQUUsQ0FBQztZQUU5QixJQUNBO2dCQUNDLE1BQU0sY0FBYyxHQUFHLFVBQVUsRUFBRSxDQUFDO2dCQUVwQyxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRTtvQkFFbkIsSUFBSSxPQUFPLElBQUksS0FBSyxRQUFRLEVBQzVCO3dCQUNDLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO3FCQUNwQztvQkFFRCxPQUFPLGNBQWMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUE7Z0JBQ3RDLENBQUMsQ0FBQyxDQUFDO2dCQUVILElBQUksQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUNmO29CQUNDLEdBQUcsQ0FBQyxHQUFHLENBQUM7d0JBQ1AsZUFBZSxFQUFFLHlCQUF5QjtxQkFDMUMsQ0FBQyxDQUFDO2lCQUNIO2dCQUVELEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDO29CQUNwQixJQUFJLEVBQUUsQ0FBQztvQkFDUCxLQUFLLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxNQUFNO29CQUN0QixTQUFTO29CQUNULElBQUksRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsU0FBUztvQkFDNUIsT0FBTyxFQUFFLEVBQUUsQ0FBQyxLQUFLO2lCQUNqQixDQUFDLENBQUM7Z0JBRUgsT0FBTzthQUNQO1lBQ0QsT0FBTyxDQUFDLEVBQ1I7Z0JBQ0MsS0FBSyxHQUFHLENBQUMsQ0FBQztnQkFFVixHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQztvQkFDcEIsSUFBSSxFQUFFLENBQUM7b0JBQ1AsS0FBSyxFQUFFLElBQUk7b0JBQ1gsU0FBUztvQkFDVCxPQUFPLEVBQUUsS0FBSyxDQUFDLE9BQU87b0JBQ3RCLE9BQU8sRUFBRSxFQUFFO2lCQUNYLENBQUMsQ0FBQztnQkFFSCxPQUFPO2FBQ1A7U0FDRDtLQUNEO0lBRUQsSUFBSSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQ2Y7UUFDQyxHQUFHLENBQUMsR0FBRyxDQUFDO1lBQ1AsZUFBZSxFQUFFLHVCQUF1QjtTQUN4QyxDQUFDLENBQUM7S0FDSDtJQUVELEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQ3BCLElBQUksRUFBRSxDQUFDO1FBQ1AsS0FBSyxFQUFFLElBQUk7UUFDWCxTQUFTO1FBQ1QsT0FBTyxFQUFFLE1BQU07UUFDZixPQUFPLEVBQUUsRUFBRTtLQUNYLENBQUMsQ0FBQztBQUNKLENBQUM7QUFFRCxTQUFTLGFBQWE7SUFFckIsT0FBTyxJQUFJLGNBQU8sQ0FBQztRQUNsQixPQUFPLEVBQUUsSUFBSTtRQUNiLGdCQUFnQixFQUFFO1lBQ2pCLGNBQWMsRUFBRSxJQUFJO1NBQ3BCO1FBQ0QsT0FBTyxFQUFFLElBQUk7S0FDYixDQUFDLENBQUM7QUFDSixDQUFDO0FBRUQsU0FBZ0IsVUFBVTtJQUV6QixNQUFNLElBQUksR0FBRyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUM7SUFFckMsY0FBYyxHQUFHLGFBQWEsRUFBRSxDQUFDO0lBRWpDLHdCQUFVLENBQUMsY0FBcUIsRUFBRSxhQUFpQixDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUVyRixjQUFjLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztJQUMzQixjQUFjLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztJQUU3QixPQUFPLGNBQWMsQ0FBQTtBQUN0QixDQUFDO0FBWkQsZ0NBWUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZXhwcmVzcyA9IHJlcXVpcmUoJ2V4cHJlc3MnKTtcbmltcG9ydCB7IE5leHRGdW5jdGlvbiwgUmVxdWVzdCwgUmVzcG9uc2UgfSBmcm9tICdleHByZXNzLXNlcnZlLXN0YXRpYy1jb3JlJztcbmltcG9ydCBTZWdtZW50LCB7IElPcHRpb25zRG9TZWdtZW50IH0gZnJvbSAnbm92ZWwtc2VnbWVudC9saWIvc2VnbWVudC9jb3JlJztcbmltcG9ydCB7IHVzZU1vZHVsZXMgfSBmcm9tICdub3ZlbC1zZWdtZW50L2xpYi9zZWdtZW50L21ldGhvZHMvdXNlTW9kdWxlczInO1xuaW1wb3J0IGdldERlZmF1bHRNb2RMaXN0IGZyb20gJ25vdmVsLXNlZ21lbnQvbGliL21vZCc7XG5cbmNvbnN0IGFwcCA9IGV4cHJlc3MoKTtcblxuYXBwLnVzZShleHByZXNzLmpzb24oKSk7XG5hcHAudXNlKGV4cHJlc3MudXJsZW5jb2RlZCh7IGV4dGVuZGVkOiB0cnVlIH0pKTtcblxubGV0IENBQ0hFRF9TRUdNRU5UOiBTZWdtZW50O1xuXG5hcHAuZ2V0KCcqJywgZm4pO1xuYXBwLnBvc3QoJyonLCBmbik7XG5cbmV4cG9ydCBkZWZhdWx0IGFwcFxuXG5mdW5jdGlvbiBmbiAocmVxOiBSZXF1ZXN0LCByZXM6IFJlc3BvbnNlLCBuZXh0OiBOZXh0RnVuY3Rpb24pXG57XG5cdGxldCBycToge1xuXHRcdGlucHV0OiBzdHJpbmcgfCAoc3RyaW5nIHwgQnVmZmVyKVtdLFxuXHRcdG9wdGlvbnM6IElPcHRpb25zRG9TZWdtZW50LFxuXHRcdG5vY2FjaGU6IGJvb2xlYW4sXG5cdH0gPSBPYmplY3QuYXNzaWduKHt9LCByZXEucXVlcnksIHJlcS5ib2R5KTtcblxuXHRyZXMuc2V0KHtcblx0XHQnQWNjZXNzLUNvbnRyb2wtQWxsb3ctT3JpZ2luJzogJyonLFxuXHRcdCdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG5cdH0pO1xuXG5cdGNvbnN0IHRpbWVzdGFtcCA9IERhdGUubm93KCk7XG5cblx0bGV0IGVycm9yOiBFcnJvcjtcblxuXHRpZiAocnEuaW5wdXQgJiYgcnEuaW5wdXQubGVuZ3RoKVxuXHR7XG5cdFx0aWYgKHR5cGVvZiBycS5pbnB1dCA9PT0gJ3N0cmluZycpXG5cdFx0e1xuXHRcdFx0cnEuaW5wdXQgPSBbcnEuaW5wdXRdO1xuXHRcdH1cblxuXHRcdGlmIChBcnJheS5pc0FycmF5KHJxLmlucHV0KSlcblx0XHR7XG5cdFx0XHRycS5vcHRpb25zID0gcnEub3B0aW9ucyB8fCB7fTtcblxuXHRcdFx0dHJ5XG5cdFx0XHR7XG5cdFx0XHRcdGNvbnN0IENBQ0hFRF9TRUdNRU5UID0gZ2V0U2VnbWVudCgpO1xuXG5cdFx0XHRcdHJxLmlucHV0Lm1hcChsaW5lID0+IHtcblxuXHRcdFx0XHRcdGlmICh0eXBlb2YgbGluZSAhPT0gJ3N0cmluZycpXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0bGluZSA9IEJ1ZmZlci5mcm9tKGxpbmUpLnRvU3RyaW5nKCk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIENBQ0hFRF9TRUdNRU5ULmRvU2VnbWVudChsaW5lKVxuXHRcdFx0XHR9KTtcblxuXHRcdFx0XHRpZiAoIXJxLm5vY2FjaGUpXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRyZXMuc2V0KHtcblx0XHRcdFx0XHRcdCdDYWNoZS1Db250cm9sJzogJ3B1YmxpYywgbWF4LWFnZT0zNjAwMDAwJyxcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJlcy5zdGF0dXMoMjAwKS5qc29uKHtcblx0XHRcdFx0XHRjb2RlOiAxLFxuXHRcdFx0XHRcdGNvdW50OiBycS5pbnB1dC5sZW5ndGgsXG5cdFx0XHRcdFx0dGltZXN0YW1wLFxuXHRcdFx0XHRcdHRpbWU6IERhdGUubm93KCkgLSB0aW1lc3RhbXAsXG5cdFx0XHRcdFx0cmVzdWx0czogcnEuaW5wdXQsXG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdGNhdGNoIChlKVxuXHRcdFx0e1xuXHRcdFx0XHRlcnJvciA9IGU7XG5cblx0XHRcdFx0cmVzLnN0YXR1cyg1MDApLmpzb24oe1xuXHRcdFx0XHRcdGNvZGU6IDAsXG5cdFx0XHRcdFx0ZXJyb3I6IHRydWUsXG5cdFx0XHRcdFx0dGltZXN0YW1wLFxuXHRcdFx0XHRcdG1lc3NhZ2U6IGVycm9yLm1lc3NhZ2UsXG5cdFx0XHRcdFx0cmVxdWVzdDogcnEsXG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRpZiAoIXJxLm5vY2FjaGUpXG5cdHtcblx0XHRyZXMuc2V0KHtcblx0XHRcdCdDYWNoZS1Db250cm9sJzogJ3B1YmxpYywgbWF4LWFnZT0xMDAwMCcsXG5cdFx0fSk7XG5cdH1cblxuXHRyZXMuc3RhdHVzKDQwMCkuanNvbih7XG5cdFx0Y29kZTogMCxcblx0XHRlcnJvcjogdHJ1ZSxcblx0XHR0aW1lc3RhbXAsXG5cdFx0bWVzc2FnZTogJ+WPg+aVuOmMr+iqpCcsXG5cdFx0cmVxdWVzdDogcnEsXG5cdH0pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVTZWdtZW50KClcbntcblx0cmV0dXJuIG5ldyBTZWdtZW50KHtcblx0XHRhdXRvQ2prOiB0cnVlLFxuXHRcdG9wdGlvbnNEb1NlZ21lbnQ6IHtcblx0XHRcdGNvbnZlcnRTeW5vbnltOiB0cnVlLFxuXHRcdH0sXG5cdFx0YWxsX21vZDogdHJ1ZSxcblx0fSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRTZWdtZW50KClcbntcblx0Y29uc3QgRElDVCA9IHJlcXVpcmUoJy4vY2FjaGUuanNvbicpO1xuXG5cdENBQ0hFRF9TRUdNRU5UID0gY3JlYXRlU2VnbWVudCgpO1xuXG5cdHVzZU1vZHVsZXMoQ0FDSEVEX1NFR01FTlQgYXMgYW55LCBnZXREZWZhdWx0TW9kTGlzdChDQUNIRURfU0VHTUVOVC5vcHRpb25zLmFsbF9tb2QpKTtcblxuXHRDQUNIRURfU0VHTUVOVC5ESUNUID0gRElDVDtcblx0Q0FDSEVEX1NFR01FTlQuaW5pdGVkID0gdHJ1ZTtcblxuXHRyZXR1cm4gQ0FDSEVEX1NFR01FTlRcbn1cbiJdfQ==
"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e=require("util"),t=require("assert");function _handleLazyMatchOptions(t={}){var n,r;return null!==(n=t)&&void 0!==n||(t={}),{...t,inspectFn:null!==(r=t.inspectFn)&&void 0!==r?r:e.inspect}}function lazyMatch(e,n,r={}){let i=null;const{inspectFn:a,firstOne:l}=_handleLazyMatchOptions(r);let o=n.every((function(t,n,r){let a=-1,o=i;if(null==i&&(i=-1),Array.isArray(t)?l?t.some((function(t){let n=e.indexOf(t,o);if(n>-1&&n>i)return a=n,!0})):a=t.reduce((function(t,n){let r=e.indexOf(n,o);return r>-1&&r>i?-1==t?r:Math.min(r,t):t}),-1):a=e.indexOf(t,o),a>-1&&a>i)return i=a,!0}));return-1===i&&(o=!1),!o&&t.fail(`expected ${a(e)} to have includes ordered members ${a(n)}`),o}exports._handleLazyMatchOptions=_handleLazyMatchOptions,exports.lazyMatch=lazyMatch,exports.lazyMatch002=function lazyMatch002(e,n,r={}){let i;r=_handleLazyMatchOptions(r);for(let t of n)try{if(i=lazyMatch(e,t,r),i)break}catch(e){}!i&&t.fail(`expected ${r.inspectFn(e)} to have includes one of ordered members in ${r.inspectFn(n)}`)},exports.lazyMatchNot=function lazyMatchNot(e,n,r={}){let i=null;const{inspectFn:a}=_handleLazyMatchOptions(r);let l=n.every((function(t,n,a){let l=-1,o=i;return null==i&&(i=-1),Array.isArray(t)?r.firstOne?t.some((function(t){let n=e.indexOf(t,o);if(n>-1&&n>i)return l=n,!0})):l=t.reduce((function(t,n){let r=e.indexOf(n,o);return r>-1&&r>i?-1==t?r:Math.min(r,t):t}),-1):l=e.indexOf(t,o),!(l>-1&&(i=l,1))}));return-1===i&&(l=!0),!l&&t.fail(`expected ${a(e)} should not have includes ordered members ${a(n)}`),l},exports.lazyMatchSynonym001=function lazyMatchSynonym001(e,n,r={}){let i,a;const{inspectFn:l}=_handleLazyMatchOptions(r);i=n.every((function(n){let r=a;null==a&&(a=-1);let i=-1;if(Array.isArray(n)?n.some((t=>{let a=e.indexOf(t,r);if(a>-1)return i=a,n=t,!0})):i=e.indexOf(n,r),i>-1&&i>=a)return a=i+n.length,!0;a>-1&&t.fail(`expected ${l(e)} to have have ${l(n)} on index > ${a}, but got ${i}`)})),-1===a&&(i=!1),!i&&t.fail(`expected ${l(e)} to have index of ordered members in ${l(n)}`)},exports.lazyMatchSynonym001Not=function lazyMatchSynonym001Not(e,n,r={}){let i;const{inspectFn:a}=_handleLazyMatchOptions(r);n.every((function(n){let r=i;null==i&&(i=-1);let l=-1;if(Array.isArray(n)?n.some((t=>{let i=e.indexOf(t,r);if(i>-1)return l=i,n=t,!0})):l=e.indexOf(n,r),l>-1&&l>i)return t.fail(`expected ${a(e)} to not have ${a(n)} on index > ${i}, but got ${l}`),!0;i++}))};
//# sourceMappingURL=index.cjs.production.min.cjs.map

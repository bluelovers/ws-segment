"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const express = require("express");
const cors = require("cors");
const core_1 = require("novel-segment/lib/segment/core");
const useModules2_1 = require("novel-segment/lib/segment/methods/useModules2");
const mod_1 = require("novel-segment/lib/mod");
const url_1 = require("url");
const app = express();
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(cors());
let CACHED_SEGMENT;
app.get('*', fn);
app.post('*', fn);
exports.default = app;
function fn(req, res, next) {
    let rq = Object.assign({}, req.query, url_1.parse(req.url, true).query, req.body);
    res.set({
        //'Access-Control-Allow-Origin': '*',
        'Content-Type': 'application/json',
    });
    const timestamp = Date.now();
    let error;
    if (rq.input && rq.input.length) {
        if (typeof rq.input === 'string') {
            rq.input = [rq.input];
        }
        if (Array.isArray(rq.input)) {
            rq.options = rq.options || {};
            try {
                const CACHED_SEGMENT = getSegment();
                const results = rq.input.map(line => {
                    if (typeof line !== 'string') {
                        line = Buffer.from(line).toString();
                    }
                    return CACHED_SEGMENT.doSegment(line, rq.options);
                });
                if (!rq.nocache && !rq.debug) {
                    res.set({
                        'Cache-Control': 'public, max-age=3600000',
                    });
                }
                const json = {
                    code: 1,
                    count: results.length,
                    timestamp,
                    time: Date.now() - timestamp,
                    results,
                    options: rq.options,
                };
                if (rq.debug) {
                    // @ts-ignore
                    json.request = {
                        rq,
                        params: req.params,
                        query: req.query,
                        body: req.body,
                        baseUrl: req.baseUrl,
                        url: req.url,
                        query2: url_1.parse(req.url, true).query,
                    };
                }
                res.status(200).json(json);
                return;
            }
            catch (e) {
                error = e;
                res.status(500).json({
                    code: 0,
                    error: true,
                    timestamp,
                    message: error.message,
                    request: rq,
                });
                return;
            }
        }
    }
    if (!rq.nocache) {
        res.set({
            'Cache-Control': 'public, max-age=10000',
        });
    }
    res.status(400).json({
        code: 0,
        error: true,
        timestamp,
        message: '參數錯誤',
        request: rq,
    });
}
function createSegment() {
    return new core_1.default({
        autoCjk: true,
        optionsDoSegment: {
            convertSynonym: true,
        },
        all_mod: true,
    });
}
function getSegment() {
    const DICT = require('./cache.json');
    CACHED_SEGMENT = createSegment();
    useModules2_1.useModules(CACHED_SEGMENT, mod_1.default(CACHED_SEGMENT.options.all_mod));
    CACHED_SEGMENT.DICT = DICT;
    CACHED_SEGMENT.inited = true;
    return CACHED_SEGMENT;
}
exports.getSegment = getSegment;
//# sourceMappingURL=data:application/json;base64,